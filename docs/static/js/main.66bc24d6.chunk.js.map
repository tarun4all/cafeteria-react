{"version":3,"sources":["components/modal.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","info","msg","message","UserModal","Form","create","name","props","useState","position","setPosition","getFieldDecorator","form","title","visible","onSubmit","e","preventDefault","validateFields","err","values","localStorage","setItem","JSON","stringify","designation","created","Date","Item","label","style","width","type","value","onChange","htmlType","TabPane","Tabs","renderContent","user","column","size","extraContent","display","justifyContent","marginRight","prefix","Content","children","extra","className","App","count","setCount","first","setFirst","setUser","setExpense","error","setError","firstTime","updateDetails","userInfo","getItem","expense","parse","_date","day","getDate","month","getMonth","console","log","parseInt","useEffect","border","onBack","window","history","back","subTitle","backIcon","key","footer","defaultActiveKey","tab","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAIQA,G,OAAWC,IAAXD,QAEFE,EAAO,SAACC,GACVC,IAAQF,KAAKC,IAoEjB,IAEeE,EAFGC,IAAKC,OAAO,CAAEC,KAAM,4BAApBF,EAjElB,SAAqBG,GAAQ,IAAD,EACQC,mBAAS,aADjB,mBACjBC,EADiB,KACPC,EADO,KAEhBC,EAAsBJ,EAAMK,KAA5BD,kBAiBR,OACE,6BACE,kBAAC,IAAD,CACIE,MAAM,iBACNC,SAAS,GAET,6BACA,kBAAC,IAAD,CAAMC,SAvBK,SAACC,GAClBA,EAAEC,iBACFV,EAAMK,KAAKM,gBAAe,SAACC,EAAKC,GACzBD,EAIHnB,EAAKmB,IAHLE,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,CAAClB,KAAMc,EAAOd,KAAMmB,YAAahB,EAAUiB,QAAU,IAAIC,QACrGpB,EAAMmB,gBAmBF,kBAAC,IAAKE,KAAN,CAAWC,MAAM,QACdlB,EAAkB,OAAQ,GAA1BA,CACE,yBAAKmB,MAAO,CAACC,MAAO,SACrB,kBAAC,IAAD,CACEC,KAAK,OACLF,MAAO,CAAEC,MAAO,aAItB,kBAAC,IAAKH,KAAN,CAAWC,MAAM,eAEblB,EAAkB,cAAe,GAAjCA,CACE,yBAAKmB,MAAO,CAACC,MAAO,SAClB,kBAAC,IAAD,CACEE,MAAOxB,EACPyB,SA3BG,SAACzB,GACpBC,EAAYD,IA2BIqB,MAAO,CAAEC,MAAO,SAEhB,kBAACjC,EAAD,CAAQmC,MAAM,aAAd,aACA,kBAACnC,EAAD,CAAQmC,MAAM,cAAd,cACA,kBAACnC,EAAD,CAAQmC,MAAM,mBAAd,uBAMV,kBAAC,IAAKL,KAAN,KACE,kBAAC,IAAD,CAAQI,KAAK,UAAUG,SAAS,UAAhC,kBC1DRC,G,OAAYC,IAAZD,SAEFE,EAAgB,SAACC,GAAD,IAAOC,EAAP,uDAAgB,EAAhB,OACpB,kBAAC,IAAD,CAAcC,KAAK,QAAQD,OAAQA,GACjC,kBAAC,IAAaZ,KAAd,CAAmBC,MAAM,QAAQU,EAAKjC,MACtC,kBAAC,IAAasB,KAAd,KACE,2BAAIW,EAAKd,cAEX,kBAAC,IAAaG,KAAd,CAAmBC,MAAM,iBAAiBU,EAAKb,SAC/C,kBAAC,IAAaE,KAAd,CAAmBC,MAAM,WAAzB,gCAMEa,EACJ,yBACEZ,MAAO,CACLa,QAAS,OACTZ,MAAO,cACPa,eAAgB,aAGlB,kBAAC,IAAD,CACE/B,MAAM,SACNoB,MAAM,UACNH,MAAO,CACLe,YAAa,MAGjB,kBAAC,IAAD,CAAWhC,MAAM,QAAQiC,OAAO,IAAIb,MAAO,UAIzCc,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QAAQF,GACvB,yBAAKE,UAAU,SAASD,KAKxBjD,EAAO,SAACC,GACZC,IAAQF,KAAKC,IA2FAkD,MAxFf,WAAgB,IAAD,EACa3C,oBAAS,GADtB,mBACN4C,EADM,KACCC,EADD,OAEa7C,oBAAS,GAFtB,mBAEN8C,EAFM,KAECC,EAFD,OAGW/C,mBAAS,IAHpB,mBAGN+B,EAHM,KAGAiB,EAHA,OAIiBhD,mBAAS,IAJ1B,mBAIGiD,GAJH,aAKajD,mBAAS,IALtB,mBAKNkD,EALM,KAKCC,EALD,KAQPC,EAAY,WAChBL,GAAS,IAQLM,EAAgB,WACpB,IAAMC,EAAWzC,aAAa0C,QAAQ,QAChCC,EAAU3C,aAAa0C,QAAQ,WAKrC,IACE,GAAGD,EAAU,CACX,IAAMvB,EAAOhB,KAAK0C,MAAMH,GAClBI,EAAQ,IAAIvC,KAAKY,EAAKb,SAAUyC,EAAMD,EAAME,UAAWC,EAAQH,EAAMI,WAC3EC,QAAQC,IAAIL,EAAM,IAAKE,GACvBb,EAAQ,eAAIjB,EAAL,CAAWb,QAAQ,GAAD,OAAKyC,EAAL,YATV,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAClE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAQJM,SAASJ,QACzDZ,EAAWlC,KAAK0C,MAAMD,SAEtBJ,IAEF,MAAMzC,GACNoD,QAAQC,IAAIrD,GACZwC,EAAS,mBAwBb,OApBAe,qBAAU,WACR,IAAItB,EACF,IACmB7B,KAAK0C,MAAM5C,aAAa0C,QAAQ,SAG/CF,IAEAD,IAEFP,GAAS,GACT,MAAMlC,GACNoD,QAAQC,IAAIrD,GACZyC,IACAD,EAAS,oBAGZ,IAEHY,QAAQC,IAAIjC,GAEV,6BACE,kBAAC,IAAD,CACET,MAAO,CACL6C,OAAQ,gCAEVC,OAAQ,kBAAMC,OAAOC,QAAQC,QAC7BlE,MAAM,cACNmE,SAAS,kCACTC,SAAU,kBAAC,IAAD,CAAMjD,KAAK,WACrBiB,MAAO,CACL,kBAAC,IAAD,CAAQiC,IAAI,KAAZ,mBAEFC,OACE,kBAAC,IAAD,CAAMC,iBAAiB,KACrB,kBAAChD,EAAD,CAASiD,IAAI,UAAUH,IAAI,MAC3B,kBAAC9C,EAAD,CAASiD,IAAI,OAAOH,IAAI,QAI5B,kBAAC,EAAD,CAASjC,MAAOP,GAAeJ,EAAcC,KAE9Ce,EAAQ,kBAAC,EAAD,CAAW5B,QAtEJ,WAClB6B,GAAS,GACTM,OAoEkD,GAC/CH,EAAQ1D,EAAK0D,GAAS,KC5HT4B,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66bc24d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Select, Modal, Form, Input, message} from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Option } = Select;\n\nconst info = (msg) => {\n    message.info(msg);\n};\n\nfunction UserAccount(props) {\n    const [position, setPosition] = useState('Developer');\n    const { getFieldDecorator } = props.form;\n    const createUser = (e) => {\n      e.preventDefault();\n      props.form.validateFields((err, values) => {\n        if (!err) {\n          localStorage.setItem('user', JSON.stringify({name: values.name, designation: position, created: (new Date())}))\n          props.created();\n        } else {\n          info(err);\n        }\n      });\n    }\n  \n    const positionChange = (position) => {\n        setPosition(position);\n    }\n  \n    return(\n      <div>\n        <Modal\n            title=\"Create Account\"\n            visible={true}\n          >\n            <div>\n            <Form onSubmit={createUser}>\n              <Form.Item label=\"Name\">\n                {getFieldDecorator('name', {\n                })(<div style={{width: '100%'}}> \n                  <Input\n                    type=\"text\"\n                    style={{ width: '100%'}}\n                  />\n                </div>)}\n              </Form.Item>\n              <Form.Item label=\"Designation\">\n                {\n                  getFieldDecorator('designation', {})(\n                    <div style={{width: '100%'}}>\n                      <Select\n                        value={position}\n                        onChange={positionChange}\n                        style={{ width: '100%' }}\n                      >\n                        <Option value=\"Developer\">Developer</Option>\n                        <Option value=\"Accountant\">Accountant</Option>\n                        <Option value=\"Project_Manager\">Project Manager</Option>\n                      </Select>\n                    </div>\n                  )\n                }\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n            </div>\n          </Modal>\n      </div>\n    );\n  }\n  \nconst UserModal = Form.create({ name: 'customized_form_controls' })(UserAccount);\n\nexport default UserModal;\n","import React, { useState, useEffect } from 'react';\nimport { PageHeader, Tabs, Statistic, Descriptions, Icon, message, Button, Select, Modal, Form, Input} from 'antd';\nimport UserModal from './components/modal';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst { TabPane } = Tabs;\n\nconst renderContent = (user, column = 2) => (\n  <Descriptions size=\"small\" column={column}>\n    <Descriptions.Item label=\"Name\">{user.name}</Descriptions.Item>\n    <Descriptions.Item>\n      <a>{user.designation}</a>\n    </Descriptions.Item>\n    <Descriptions.Item label=\"Creation Time\">{user.created}</Descriptions.Item>\n    <Descriptions.Item label=\"Remarks\">\n      Only for inhouse cafeteria\n    </Descriptions.Item>\n  </Descriptions>\n);\n\nconst extraContent = (\n  <div\n    style={{\n      display: 'flex',\n      width: 'max-content',\n      justifyContent: 'flex-end',\n    }}\n  >\n    <Statistic\n      title=\"Status\"\n      value=\"Pending\"\n      style={{\n        marginRight: 32,\n      }}\n    />\n    <Statistic title=\"Price\" prefix=\"$\" value={568.08} />\n  </div>\n);\n\nconst Content = ({ children, extra }) => {\n  return (\n    <div className=\"content\">\n      <div className=\"main\">{children}</div>\n      <div className=\"extra\">{extra}</div>\n    </div>\n  );\n};\n\nconst info = (msg) => {\n  message.info(msg);\n};\n\nfunction App() {\n  const [count, setCount] = useState(false);\n  const [first, setFirst] = useState(false);\n  const [user, setUser] = useState({});\n  const [expense, setExpense] = useState({});\n  const [error, setError] = useState('');\n  const category = [{name: 'Aloo pratha', price: 25}, {name: 'Paneer pratha', price: 30}, {name: 'Anda pratha', price: 30}, {name: 'Aloo patty', price: 20}, {name: 'Paneer patty', price: 25}, {name: 'Tea', price: 10}];\n\n  const firstTime = () => {\n    setFirst(true);\n  }\n\n  const userCreated = () => {\n    setFirst(false);\n    updateDetails();\n  }\n\n  const updateDetails = () => {\n    const userInfo = localStorage.getItem('user');\n    const expense = localStorage.getItem('expense');\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n    \n    try {\n      if(userInfo) {\n        const user = JSON.parse(userInfo);\n        const _date = new Date(user.created), day = _date.getDate(), month = _date.getMonth();\n        console.log(day + '-', month);\n        setUser({...user, created: `${day}-${monthNames[parseInt(month)]}`});\n        setExpense(JSON.parse(expense));\n      } else {\n        firstTime();\n      }\n    } catch(err) {\n      console.log(err);\n      setError('Error occures');\n    }\n  }\n\n  useEffect(() => {\n    if(!count) {\n      try {\n        const userInfo = JSON.parse(localStorage.getItem('user'));\n\n        if(userInfo) {\n          updateDetails();\n        } else {\n          firstTime();\n        }\n        setCount(true);\n      } catch(err) {\n        console.log(err);\n        firstTime();\n        setError('Error occures');\n      }\n    }\n  }, [])\n\n  console.log(user);\n  return (\n    <div>\n      <PageHeader\n        style={{\n          border: '1px solid rgb(235, 237, 240)',\n        }}\n        onBack={() => window.history.back()}\n        title=\"Daily Bites\"\n        subTitle=\"Don't hassle with empty stomach\"\n        backIcon={<Icon type=\"coffee\" />}\n        extra={[\n          <Button key=\"1\">Update profile</Button>,\n        ]}\n        footer={\n          <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Details\" key=\"1\" />\n            <TabPane tab=\"Rule\" key=\"2\" />\n          </Tabs>\n        }\n      >\n        <Content extra={extraContent}>{renderContent(user)}</Content>\n      </PageHeader>\n      {first ? <UserModal created = {userCreated}/> : ''}\n      {error ? info(error) : ''}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}